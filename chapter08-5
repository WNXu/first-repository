

import java.util.Arrays;

public class ArrayMinSum {

	/**
	 * 数组小和：（类似逆序对个数的思想）用归并排序;
	 * [1,3, 5, 2, 4, 6];
	 * <=1:在1的左边0个；
	 * <=3：在3的左边有1；所以和为1；
	 * <=5:在5的左边有1,3；所以和为1 + 3；
	 * <=2:在2的左边有1；所以和为1；
	 * <=4:在4的左边有1， 3， 2；所以和为1+3+2;
	 * <=6:在6的左边有1， 3， 5， 2， 4；所以和为1 + 3 + 5 + 2 + 4 ；
	 * 
	 */
	private static int sum = 0;
	
	public void merge(int[] arr, int p, int q, int r) {
		int[] left = new int[q - p + 1];
		int[] right = new int[r - q];
		int leftLen = q - p + 1;
		int rightLen = r - q;
		for(int i = p; i <= q; i++) {
			left[i - p] = arr[i];
		}
		for(int i = q + 1; i <= r; i++) {
			right[i - q - 1] = arr[i];
		}
		int k = p;
		int j = 0;
		int i = 0;
		while(i < leftLen && j < rightLen) {
			if(left[i] <= right[j]) {
				sum += (rightLen - j) * left[i];
				arr[k++] = left[i++];
			} else {
				arr[k++] = right[j++];
			}
		}
		while(i < leftLen) {
			arr[k++] = left[i++];
		}
		while(j < rightLen) {
			arr[k++] = right[j++];
		}
	}
	
	public void mergeSort(int[] arr, int p, int r) {
		if(p < r) {
			int q = p + (r - p) / 2;
			mergeSort(arr, p, q);
			mergeSort(arr, q + 1, r);
			merge(arr, p, q, r);
		}
	}
	
	
	public int getMinSum(int[] arr) {
		if(arr == null || arr.length == 0) {
			return 0;
		} else {
			int len = arr.length;
			mergeSort(arr, 0, len - 1);
			System.out.println(Arrays.toString(arr));
			return sum;
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] arr = {1, 3, 5, 2, 4, 6};
		ArrayMinSum as = new ArrayMinSum();
		int res = as.getMinSum(arr);
		System.out.println(res);
	}

}

/*
未排序正整数数组中累加和为给定值的最长子数组的长度
k = 3 , [1,2,1,1,1]---> res = 3;
*/

public class LongestSubArraySumToK {

	/**
	 * 设置一个下标begin作为当前sum的起始位置的下标；
	 * 1.如果Sum+当前i位置上的元素小于k，直接将Sum+=arr[i];
	 * 2.如果sum+arr[i] == k,说明和等于指定值，所以比较当前的长度与max 的大小，取最大的，然后将sum-第一个begin位置的下标，将当前元素的arr[i]+sum，begin++；
	 * 3.如果sum+arr[i] > k,说明当前和过大，所以将sum-arr[begin],begin++; 
	 * @param arr
	 * @param k
	 * @return
	 */
	public int getLongesetSubArray(int[] arr, int k) {
		if(arr == null || arr.length == 0) {
			return -1;
		} else {
			int len = arr.length;
			int max = 0;
			int begin = 0;
			int sum = 0;
			for(int i = 0; i < len; i++) {
				if(arr[i] + sum == k) {
					if(i - begin + 1 > max) {
						max = i - begin + 1;
					}
					sum = sum + arr[i] - arr[begin];
					begin++;
				} else if(arr[i] + sum > k) {
					sum = sum - arr[begin] + arr[i];
					begin++;
				} else {
					sum += arr[i];
				}
			}
			return max;
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		LongestSubArraySumToK st = new LongestSubArraySumToK();
		int[] arr = {1, 5, 2, 2, 1, 1, 1};
		int k = 4;
		int res = st.getLongesetSubArray(arr, k);
		System.out.println(res);
	}

}
